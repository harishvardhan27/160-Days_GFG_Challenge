Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.
The graph is represented as a 2D vector edges[][], where each entry edges[i] = [u, v] denotes an edge from verticex u to v.

Examples:

Input: V = 4, edges[][] = [[0, 1], [0, 2], [1, 2], [2, 0], [2, 3]]

Output: true
Explanation: The diagram clearly shows a cycle 0 → 2 → 0
Input: V = 4, edges[][] = [[0, 1], [0, 2], [1, 2], [2, 3]

Output: false
Explanation: no cycle in the graph
Constraints:
1 ≤ V, E ≤ 105
u ≠ v

SOLUTION:

class Solution {
    private static boolean isCyclicUtil(List<Integer>[] adj,int u,boolean[] visited,boolean[] recstack){
        if(recstack[u]) return true;
        if(visited[u])return false;
        visited[u]=true;
        recstack[u]=true;
        for(int v:adj[u]){
            if(isCyclicUtil(adj,v,visited,recstack)) return true;
        }
        recstack[u]=false;
        return false;
    }
    private static List<Integer>[] constructAdj( int V,int[][] edges){
        List<Integer>[] adj = new ArrayList[V];
        for(int i=0;i<V;i++){
            adj[i]=new ArrayList<>();
        }
        for(int[] edge:edges){
            adj[edge[0]].add(edge[1]);
        }
        return adj;
    }
    public boolean isCyclic(int V, int[][] edges) {
        // code here
        List<Integer>[] adj=constructAdj(V,edges);
        boolean[] visited=new boolean[V];
        boolean[] recstack=new boolean[V];
        for(int i=0;i<V;i++){
            if(isCyclicUtil(adj,i,visited,recstack)) return true;
        }
        return false;
        
    }
}
