Given a sorted array arr[] and a target value, the task is to count triplets (i, j, k) of valid indices, such that arr[i] + arr[j] + arr[k] = target and i < j < k.

Examples:

Input: arr[] = [-3, -1, -1, 0, 1, 2], target = -2
Output: 4
Explanation: Four triplets that add up to -2 are:
arr[0] + arr[3] + arr[4] = (-3) + 0 + (1) = -2
arr[0] + arr[1] + arr[5] = (-3) + (-1) + (2) = -2
arr[0] + arr[2] + arr[5] = (-3) + (-1) + (2) = -2
arr[1] + arr[2] + arr[3] = (-1) + (-1) + (0) = -2
Input: arr[] = [-2, 0, 1, 1, 5], target = 1
Output: 0
Explanation: There is no triplet whose sum is equal to 1. 
Constraints:
3 ≤ arr.size() ≤ 104
-105 ≤ arr[i], target ≤ 105


SOLUTION:


class Solution {
    public int countTriplets(int[] arr, int target) {
        // Code Here
        int n=arr.length;
        int result=0;
        for(int i=0;i<n-2;i++){
            int left=i+1;
            int right=n-1;
            while(left<right){
                int sum=arr[i]+arr[left]+arr[right];
                if(sum<target) left+=1;
                else if(sum>target) right-=1;
                else if(sum==target){
                    int element1=arr[left];
                    int element2=arr[right];
                    int count1=0;
                    int count2=0;
                    while(left<=right&&arr[left]==element1){
                        left++;
                        count1++;
                    }
                    while(left<=right&&arr[right]==element2){
                        right--;
                        count2++;
                    }
                    if(element1==element2) result+=(count1*(count1-1))/2;
                    else result+=(count1*count2);
                }
            }
        }
        return result;
    }
}
