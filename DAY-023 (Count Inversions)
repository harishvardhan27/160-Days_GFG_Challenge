Given an array of integers arr[]. You have to find the Inversion Count of the array. 
Note : Inversion count is the number of pairs of elements (i, j) such that i < j and arr[i] > arr[j].

Examples:

Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).
Input: arr[] = [2, 3, 4, 5, 6]
Output: 0
Explanation: As the sequence is already sorted so there is no inversion count.
Input: arr[] = [10, 10, 10]
Output: 0
Explanation: As all the elements of array are same, so there is no inversion count.
Constraints:
1 ≤ arr.size() ≤ 105
1 ≤ arr[i] ≤ 104

SOLUTION:



// User function Template for Java

class Solution {
    // Function to count inversions in the array.
     static int merge(int[] arr,int left,int mid,int right){
            int n1=mid-left+1;
            int n2=right-mid;
            int[] Left=new int[n1];
            int[] Right=new int[n2];
            for(int i=0;i<n1;i++) Left[i]=arr[i+left];
            for(int j=0;j<n2;j++) Right[j]=arr[mid+1+j];
            int result=0;
            int i=0,j=0,k=left;
            while(i<n1&&j<n2){
                if(Left[i]<=Right[j]) arr[k++]=Left[i++];
                else{
                    arr[k++]=Right[j++];
                    result+=(n1-i);
                }
            }
            while(i<n1) arr[k++]=Left[i++];
            while(j<n2) arr[k++]=Right[j++];
            return result;
        }
        static int countinversion(int[] arr,int left,int right){
            int result=0;
            if(left<right){
                int mid=(left+right)/2;
                result+=countinversion(arr,left,mid);
                result+=countinversion(arr,mid+1,right);
                result+=merge(arr,left,mid,right);
                
            }
            return result;
        }
    static int inversionCount(int arr[]) {
        // Your Code Here
      /*  int count=0;
        int n=arr.length;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(arr[i]>arr[j]){
                    count++;
                }
            }
        }
        return count;*/
       
        return countinversion(arr,0,arr.length-1);
    }
}
