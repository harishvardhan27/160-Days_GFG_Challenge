Given an array arr[] of non-negative integers of size n. Find the maximum possible XOR between two numbers present in the array.

Examples:

Input: arr[] = [25, 10, 2, 8, 5, 3]
Output: 28
Explanation: The maximum possible XOR is 5 ^ 25 = 28.
Input: arr[] = [1, 2, 3, 4, 5, 6, 7]
Output: 7
Explanation : The maximum possible XOR is 1 ^ 6 = 7.
Constraints:
2 ≤ arr.size() ≤ 5*104
1 ≤ arr[i] ≤ 106

SOLUTION:

// User function Template for Java

class Solution {
    static class TrieNode {
        TrieNode[] children = new TrieNode[2];
    }
    private void insert(TrieNode root, int num) {
        TrieNode node = root;
        for (int i = 19; i >= 0; i--) {
            int bit = (num >> i) & 1;
            if (node.children[bit] ==  null) {
                node.children[bit] = new TrieNode();
            }
            node = node.children[bit];
        }
    }
    private int get(TrieNode root, int num) {
        TrieNode node = root;
        int xor = 0;
        for (int i = 19; i >= 0; i--) {
            int bit = (num >> i) & 1;
            int oppositeBit = 1 - bit;
            if (node.children[oppositeBit] != null) {
                xor |= (1 << i);
                node = node.children[oppositeBit];
            }
            else {
                node = node.children[bit];
            }
        }
        return xor;
    }
    public int maxXor(int[] arr) {
        // code here
        TrieNode root = new TrieNode();
        for (int num : arr) insert(root, num);
        int max = 0;
        for (int num : arr) max = Math.max(max, get(root, num));
        return max;
    }
}
