Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of 'W's (Water) and 'L's (Land). Find the number of islands.

Note: An island is either surrounded by water or the boundary of a grid and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Examples:

Input: grid[][] = [['L', 'L', 'W', 'W', 'W'], ['W', 'L', 'W', 'W', 'L'], ['L', 'W', 'W', 'L', 'L'], ['W', 'W', 'W', 'W', 'W'], ['L', 'W', 'L', 'L', 'W']]
Output: 4
Explanation:
The image below shows all the 4 islands in the grid.
 
Input: grid[][] = [['W', 'L', 'L', 'L', 'W', 'W', 'W'], ['W', 'W', 'L', 'L', 'W', 'L', 'W']]
Output: 2
Expanation:
The image below shows 2 islands in the grid.
 
Constraints:
1 ≤ n, m ≤ 500
grid[i][j] = {'L', 'W'}

SOLUTION:
class Solution {
    public void dfs(char grid[][],int i,int j) {
        int[] dx = {-1,-1,-1,0,0,1,1,1};
        int[] dy = {-1,0,1,-1,1,-1,0,1};
        int rows = grid.length;
        int columns = grid[0].length;
        if(i < 0 || j < 0 || i >= rows || j >= columns || grid[i][j] != 'L') return ;
        grid[i][j] = 'W';
        for(int dir = 0; dir < 8; dir++){
            dfs(grid, i + dx[dir], j +dy[dir]);
        }
    }
    public int countIslands(char[][] grid) {
        // Code here
        int count = 0;
        int rows = grid.length;
        int columns = grid[0].length;
        for( int i = 0; i < rows; i++) {
            for( int j = 0; j < columns; j++){
                if(grid[i][j] == 'L') {
                    count++;
                    dfs(grid, i, j);
                }
            }
        }
        return count;
    }
}
