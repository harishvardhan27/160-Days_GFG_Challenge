Given an undirected, weighted graph with V vertices numbered from 0 to V-1 and E edges, represented by a 2d array edges[][], where edges[i] = [u, v, w] represents the edge between the nodes u and v having w edge weight.
Your task is to find the minimum weight cycle in this graph.

Examples:

Input: V = 5, edges[][] = [[0, 1, 2], [1, 2, 2], [1, 3, 1], [1, 4, 1], [0, 4, 3], [2, 3, 4]]

Output: 6
Explanation: 

Minimum-weighted cycle is  0 → 1 → 4 → 0 with a total weight of 6(2 + 1 + 3)
Input: V = 5, edges[][] = [[0, 1, 3], [1, 2, 2], [0, 4, 1], [1, 4, 2], [1, 3, 1], [3, 4, 2], [2, 3, 3]]

Output: 5
Explanation: 

Minimum-weighted cycle is  1 → 3 → 4 → 1 with a total weight of 5(1 + 2 + 2)
Constraints:
1 ≤ V ≤ 100
1 ≤ E = edges.size() ≤ 103 
1 ≤ edges[i][j] ≤ 100


SOLUTION:

class Solution {
    static final int INF = 1000000000;
    public int findMinCycle(int V, int[][] edges) {
        // code here
        int[][] dist = new int[V][V];
        int[][] adj = new int[V][V];
        for(int i =0;i<V;i++) {
            for(int j = 0;j<V;j++) {
                dist[i][j]=(i==j)?0:INF;
                adj[i][j]=INF;
            }
        }
        for(int[] e : edges) {
            int u = e[0],v=e[1],w=e[2];
            dist[u][v]=Math.min(dist[u][v],w);
            dist[v][u]=Math.min(dist[v][u],w);
            adj[u][v]=Math.min(adj[u][v],w);
            adj[v][u]=Math.min(adj[v][u],w);
        }
        int minCycle = INF;
        for(int k=0;k<V;k++){
            for(int i=0;i<k;i++){
                for(int j=i+1;j<k;j++){
                    if(dist[i][j]<INF&&adj[i][k]<INF&&adj[j][k]<INF) {
                        minCycle=Math.min(minCycle,dist[i][j]+adj[i][k]+adj[j][k]);
                    }
                }
            }
            for(int i=0;i<V;i++){
                for(int j=0;j<V;j++){
                    if(dist[i][k]<INF&&dist[k][j]<INF){
                        dist[i][j]=Math.min(dist[i][j],dist[i][k]+dist[k][j]);
                    }
                }
            }
        }
        return (minCycle==INF)?-1:minCycle;
        
    }
}
