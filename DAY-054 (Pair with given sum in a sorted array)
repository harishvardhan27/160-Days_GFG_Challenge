You are given an integer target and an array arr[]. You have to find number of pairs in arr[] which sums up to target. It is given that the elements of the arr[] are in sorted order.
Note: pairs should have elements of distinct indexes. 

Examples :

Input: arr[] = [-1, 1, 5, 5, 7], target = 6
Output: 3
Explanation: There are 3 pairs which sum up to 6 : {1, 5}, {1, 5} and {-1, 7}.
Input: arr[] = [1, 1, 1, 1], target = 2
Output: 6
Explanation: There are 6 pairs which sum up to 2 : {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1} and {1, 1}.
Input: arr[] = [-1, 10, 10, 12, 15], target = 125
Output: 0
Explanation: There is no such pair which sums up to 125.
Constraints:
-105 <= target <=105
 2 <= arr.size() <= 105
-105 <= arr[i] <= 105

SOLUTION:


// User function Template for Java

class Solution {

    int countPairs(int arr[], int target) {
        // Complete the function
        int result=0;
        int n=arr.length;
        int left=0;
        int right=n-1;
        while(left<right){
            if(arr[left]+arr[right]<target) left++;
            else if(arr[left]+arr[right]>target) right--;
            else{
                int count1=0;
                int count2=0;
                int element1=arr[left];
                int element2=arr[right];
                while(left<=right&&arr[left]==element1){
                    left++;
                    count1++;
                }
                while(left<=right&&arr[right]==element2){
                    right--;
                    count2++;
                }
                if(element1==element2){
                    result+=(count1*(count1-1))/2;
                }
                else{
                    result+=(count1*count2);
                }
                
            }
        }
        return result;
    }
}
