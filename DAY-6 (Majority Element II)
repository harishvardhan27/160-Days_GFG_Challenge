You are given an array of integer arr[] where each number represents a vote to a candidate. Return the candidates that have votes greater than one-third of the total votes, If there's not a majority vote, return an empty array. 

Note: The answer should be returned in an increasing format.

Examples:

Input: arr[] = [2, 1, 5, 5, 5, 5, 6, 6, 6, 6, 6]
Output: [5, 6]
Explanation: 5 and 6 occur more n/3 times.
Input: arr[] = [1, 2, 3, 4, 5]
Output: []
Explanation: The total number of votes are 5. No candidate occur more than floor (5/3) times. 
Constraint:
1 ≤ arr.size() ≤ 106
1 ≤ arr[i] ≤ 105

SOLUTION:


class Solution {
    // Function to find the majority elements in the array
    public List<Integer> findMajority(int[] nums) {
        // Your code goes here.
        int n=nums.length;
        HashMap<Integer,Integer>freq=new HashMap<>();
        List<Integer>result=new ArrayList<>();
        for(int element:nums){
            freq.put(element,freq.getOrDefault(element,0)+1);
        }
        for(Map.Entry<Integer,Integer>it:freq.entrySet()){
            int element=it.getKey();
            int count=it.getValue();
            if(count>n/3) result.add(element);
        }
        if(result.size()==2&&result.get(0)>result.get(1)){
            int temp=result.get(0);
            result.set(0,result.get(1));
            result.set(1,temp);
        }
        return result;
    }
}
